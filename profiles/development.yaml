passwd:
  users:
  - name: core
      # openssl passwd -1
    password_hash: "$1$kRNIEg7.$WMmX8IDE0XGgqi8hzCxWJ1"
    ssh_authorized_keys:
    - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDJSbOpP3+8rtyoyaXjo+DQkSFpF4T7Q23zpTeCENVymPW7slPUTSOIvy2mmDJa0fwvI+SeDpnxL87/iiyZnLZLKRliVnCUs8iISp9aDrYigcyZc4AGA1c3BWm5DooH7oABvwtsrEPv5zpBTWwIybDA86PmV0hoMxgGsVMUdcxLkoVEkZqanjrcB1ntR2ILLH3U/s1+M6NdUWqyF0ga0WGLlcs/wMi4BgNqcGLOx+hGjtUu45Bq3Tr0waM1n4MCsf4HPntsgzBiFDfWzNmcR0gV4vIVb0graWoCoh695jjrRwJXsBNMU0Kjj6b8h+Y/vU19walDMnmDInpRgRSbBBxZzKvyTCKUvwq2LWKhfaGHa9lskJgD9umZTS7TuppRlSlxtcKX47XnVQ+BEC2mD9LGNEhljJbOTsThemL89bTcNxCS6EMtF7UqaZLvHUXW0g2jxIEh9ovOSce/syEFw7lEmVD8NpJmR/jkAAbSYb6uZdj/xX85Uifh0JlqNiU+DgKhjpKN8M+C4gHDEqiS7km2SFDrmhz58VLkmwJXGT9RNyq8b7D48YUmvZDpMxiO3O1Ewg4HjetuvhYlHmgcpE5WvDn9WKC8onEjPosaNT5yQiOeuX0Nh0PlgcdLLb/KtBK3Hzx9BRmrCDMK00/tJkFVQm2IrZ/aEW+Te1xVeNDxnQ== joerg@matrix"

locksmith:
  reboot_strategy: "off"
  
storage:
  files:
  - path: /etc/hostname
    filesystem: root
    contents:
      inline: "CoreOS-Dev"
    mode: 0420

  - path: /home/core/.bashrc
    filesystem: root
    contents:
      inline: |
        . /usr/share/skel/.bashrc
        alias ll="ls -l"
    mode: 0644
    user:
      id: 500
    group:
      id: 501
      
  - path: /opt/bin/create-network-environment.sh
    filesystem: root
    contents:
      inline: |
        #!/bin/sh
        until ping -c1 www.github.com; do sleep 2; done
        ifconfig | awk 'BEGIN{n=0} match($0, /^([a-zA-Z0-9]+):/, a) { i=a[1]; e=match($0, /RUNNING/); n=n+1 } match($0, /^ +inet ([0-9.]+)/, a) { ip=a[1]; if(n==1) { print "DEFAULT_IPV4=" ip }; print toupper(i) "_IPV4=" ip }' > /etc/network-environment
    mode: 0700
    user:
      id: 500
    group:
      id: 501

  - path: /opt/bin/create-etcd2-environment.sh
    filesystem: root
    contents:
      inline: |
        #!/bin/sh
        . /etc/network-environment
        ETCD_NAME="dev-1"
        cat << EOF > /etc/etcd2-environment
        ETCD_NAME="${ETCD_NAME}"
        ETCD_DISCOVERY=""
        ETCD_ADVERTISE_CLIENT_URLS="http://${DEFAULT_IPV4}:2379"
        ETCD_INITIAL_ADVERTISE_PEER_URLS="http://${DEFAULT_IPV4}:2380"
        ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379"
        ETCD_LISTEN_PEER_URLS="http://0.0.0.0:2380"
        ETCD_INITIAL_CLUSTER="${ETCD_NAME}=http://${DEFAULT_IPV4}:2380"
        ETCD_INITIAL_CLUSTER_TOKEN="dev-`cat /etc/machine-id`"
        ETCD_INITIAL_CLUSTER_STATE="new"
        EOF
    mode: 0700
    user:
      id: 500
    group:
      id: 501


  - path: /opt/bin/install_docker-compose.sh
    filesystem: root
    contents:
      inline: |
        #!/bin/sh
        until ping -c1 api.github.com; do sleep 2; done
        curl -L `curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r '.assets[].browser_download_url | select(contains("Linux") and contains("x86_64"))'` > /opt/bin/docker-compose
        chmod +x /opt/bin/docker-compose
    mode: 0700
    user:
      id: 500
    group:
      id: 501
     
  - path: /etc/systemd/network/20-dhcp.network
    filesystem: root
    contents:
      inline: |
        [Match]
        Name=en*

        [Network]
        DHCP=yes

        [DHCP]
        UseMTU=true
        UseDomains=true
        ClientIdentifier=mac   
    mode: 0644
    user:
      id: 500
    group:
      id: 501

 
systemd:
  units:
    
# for development purposes
  - name: update-engine.service
    mask: true
  - name: locksmithd.service
    mask: true
          
  - name: internet-connected.service
    enable: true
    contents: |
        [Unit]
        Description=Wait until network is connected to internet (and has an IP address assigned)
        Requires=network-online.target
        After=network-online.target
    
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/sh -c "until ping -c1 api.github.com; do echo -n .; sleep 2; done"
            
  - name: network-environment-creation.service
    enable: true
    contents: |
      [Unit]
      Description=Creates an network environment file
      Documentation=https://github.com/Cube-Earth/container-tools-coreos-setup-iso
      Requires=internet-connected.service
      After=internet-connected.service

      [Service]
      Type=oneshot
      RemainAfterExit=true
      ExecStart=/opt/bin/create-network-environment.sh
            
      [Install]
      WantedBy=multi-user.target

  - name: etcd2-env-creation.service
    enable: true
    contents: |
      [Unit]
      Description=Creates an etcd2 environment file
      Documentation=https://github.com/Cube-Earth/container-tools-coreos-setup-iso
      Requires=network-environment-creation.service
      After=network-environment-creation.service

      [Service]
      Type=oneshot
      RemainAfterExit=true
      ExecStart=/opt/bin/create-etcd2-environment.sh
      
  - name: install_docker-compose.service
    enable: true
    contents: |
        [Unit]
        ConditionFirstBoot=yes
        Description=Installs docker-compose
        Requires=internet-connected.service
        After=internet-connected.service
    
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/opt/bin/install_docker-compose.sh
            
        [Install]
        WantedBy=multi-user.target

  - name: etcd2.service
    enable: true
    dropins:
    - name: "10-apply_env.conf"
      contents: |
        [Unit]
        Requires=etcd2-env-creation.service
        After=etcd2-env-creation.service

        [Service]
        EnvironmentFile=/etc/etcd2-environment
       
    # Notes: 
    # (1) This config will create a new one-node cluster WITHOUT using a discovery URL.
    # (2) Don't use a discovery URL with a token with a configured cluster size > 1 unless you know what you are doing! :-)
    # (3) Cluster sizes > 1 bootstrapping with discovery URL, will cause the booting nodes waiting in an infinite loop
    #     for the other nodes. Only after all nodes are available the local cluster data in /var/lib/etcd2 is created.
    #     And only if the data in /var/lib/etcd2 is written, the node (= etcd2 daemon) can be restarted. Otherwise
    #     the etcd2 process states an already used discovery token which can not be used any more.
    # (4) The discovery url / token is only used and valid for the so called bootstrapping phase which in fact initializes
    #     the cluster and the local cluster data inside /var/lib/etcd2 (because all node date have to be collected from all
    #      expected nodes).
    # (5) You can bypass the discovery url by using the above parameters starting with ETCD_INITIAL.
    # (6) All parameters starting with ETCD_INITIAL are only evaluated during the first startup of the etcd2.
    # (7) The first etcd2 startup is identified by an empty directory /var/lib/etcd2.
    # (8) Helpfull commands:
    #     - etcdctl cluster-health
    #     - etcdctl member list
    #     - etcdctl member add
    # (9) The above config is only valid for the first etcd cluster node. All further nodes
    #     (a) have to be added with etcdctl member add on an existing member,
    #     (b) the ouput of the above command has to be used for configuring the new node's etcd2 service.
    # (10) With the parameter ETCD_INITIAL_CLUSTER, all nodes are listed. With this, no queries/waiting on missing nodes are needed.
    # (11) The ETCD_ADVERTISE_CLIENT_URLS and ETCD_INITIAL_ADVERTISE_PEER_URLS must be unique for each node.
    # (12) The ETCD_ADVERTISE_CLIENT_URLS is the public IP address for clients (presumable using etcdctl)
    # (13) The ETCD_INITIAL_ADVERTISE_PEER_URLS, ETCD_INITIAL_CLUSTER are the private IP addresses for communicating of the nodes 
    #      (= peers) with each other.
    # (14) Ports in examples with 4001 or 7001 are ports of a deprecated etcd API.
    # (15) By default, the cluster token is generated based on the discovery URL (which includes an random token).
    #      Based on the cluster token, the cluster ID is generated.
    #      To avoid duplicated cluster IDs and by this, a corrupt cluster due to two clusters with the same ID, it is recommend to
    #      set this to a unique string identifying your cluster (e.g. in case when no discovery URL is used).
    
  - name: etcd-waiter.service
    enable: true
    contents: |
        [Unit]
        Description=Wait until etcd startup is completed
        Requires=etcd2.service
        After=etcd2.service
    
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/sh -c "until etcdctl set /startup/alive-test 1; do echo -n .; sleep 2; done"

  - name: flanneld.service
    enable: true
    dropins:
    - name: 50-network-config.conf
      contents: |
        [Unit]
        After=etcd-waiter.service
        Requires=etcd-waiter.service
      
        [Service]
        ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "10.1.0.0/16" }'

  - name: docker.service
    enable: true
    dropins:
#    - name: 50-ssl.conf
#      contents: |
#      [Service]
#      Environment=ETCD_SSL_DIR=/etc/ssl
    - name: 60-docker-wait-for-flannel-config.conf
      contents: |
          [Unit]
          After=flanneld.service
          Requires=flanneld.service

          [Service]
          Restart=always
